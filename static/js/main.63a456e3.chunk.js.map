{"version":3,"sources":["components/LoginComponent.tsx","store/reducer.ts","store/actions.ts","components/MenuComponent.tsx","components/TransferComponent.tsx","constants/minRemaining.tsx","components/App.tsx","serviceWorker.js","index.tsx"],"names":["forgotPassClass","css","LoginComponent","history","useHistory","React","validated","setValidated","Form","noValidate","Group","controlId","Label","Control","required","type","placeholder","defaultValue","Button","onClick","push","href","className","reducer","state","action","remaining","payload","menuClass","menuItemClass","remainingClass","MenuComponent","props","StateContext","dispatch","centerClass","TransferComponent","memo","useState","useContext","disableTransfer","Alert","variant","Row","as","Col","xs","Check","custom","label","id","disabled","injectGlobal","containerClass","initialState","App","Provider","value","Container","exact","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63a456e3.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {Button, Form} from \"react-bootstrap\";\nimport {css} from \"emotion\";\nimport {useHistory } from \"react-router-dom\";\n\nconst forgotPassClass = css`\n    display: block;\n    text-decoration: underline;\n    margin-top: 17px;\n`\n\n\nexport const LoginComponent: React.FunctionComponent = () => {\n    const history = useHistory();\n    const [validated, setValidated] = React.useState(false)\n\n    const onSubmitHandler = (): void => {\n        setValidated(true)\n        history.push('./menu')\n    }\n\n    return (\n        <Form noValidate validated={validated}>\n            <Form.Group controlId=\"validationCustom01\">\n                <Form.Label>First name</Form.Label>\n                <Form.Control\n                    required\n                    type=\"text\"\n                    placeholder=\"First name\"\n                    defaultValue=\"Mark\"\n                />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control required type=\"password\" placeholder=\"Password\"/>\n            </Form.Group>\n\n            <Button type=\"button\" onClick={onSubmitHandler}>Submit form</Button>\n            <a href=\"#\" className={forgotPassClass}>Մոռացել եմ գաղտնաբարը</a>\n        </Form>\n    );\n}\n","import {IState} from \"./IState\";\nimport * as actionTypes from \"./actions\";\n\nexport interface IAction {\n    type: string\n    payload?: any\n}\n\nexport const reducer = (state: IState, action: IAction) => {\n    switch(action.type) {\n        case actionTypes.SET_REMAINING: {\n            return {\n                ...state,\n                remaining: action.payload\n            }\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n","export const SET_REMAINING = 'SET_REMAINING'\n","import * as React from \"react\";\nimport {css} from \"emotion\";\nimport {StateContext} from './App';\nimport {SET_REMAINING} from \"../store/actions\";\nimport {useHistory } from \"react-router-dom\";\n\nconst menuClass = css`\n    \n`\n\nconst menuItemClass = css`\n    \n`\n\nconst remainingClass = css`\n    padding: 10px;\n    \n    span {\n        display: block;\n    }\n`\n\nexport const MenuComponent: React.FunctionComponent = React.memo(props => {\n    const {state, dispatch} = React.useContext(StateContext);\n    const history = useHistory()\n\n    const redirectToTransferPage = () => {\n        history.push('./transfer')\n    }\n\n    return <div className={menuClass}>\n        <div className={remainingClass}>\n            <span>{state.remaining}դր</span>\n            Հաշվի մնացորդ\n        </div>\n\n        <div className={menuItemClass} onClick={redirectToTransferPage}>\n            Փոխանցում հասանելի գումար\n        </div>\n\n        <div className={menuItemClass}>\n            Փոխանցումների պատմություն\n        </div>\n    </div>\n})\n","import React from \"react\";\nimport {Alert, Button, Col, Form} from \"react-bootstrap\";\nimport {css} from \"emotion\";\nimport {StateContext} from \"./App\";\nimport {MIN_REMAINING} from \"../constants/minRemaining\";\n\nconst centerClass = css`\n    align-items: flex-end;\n`\n\nexport const TransferComponent: React.FunctionComponent = React.memo(props => {\n    const [validated, setValidated] = React.useState(false)\n    const {state, dispatch} = React.useContext(StateContext);\n\n    const onSubmitHandler = () => {\n        setValidated(true)\n    }\n\n    const disableTransfer = state.remaining <= MIN_REMAINING\n\n    return <div>\n        {disableTransfer &&\n            <Alert variant='info'>\n                Դուք չունեք բավարար գեւմար Ձեր հաշվին\n            </Alert>\n        }\n        <Form noValidate validated={validated}>\n            <Form.Row className={centerClass}>\n                <Form.Group as={Col} xs={8}>\n                    <Form.Label>First name</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"Իդրամի հաշվեհամար\"\n                        defaultValue=\"Mark\"\n                    />\n                </Form.Group>\n                <Form.Group as={Col}>\n                    <Form.Check\n                        custom\n                        label=\"Հիշել\"\n                        type='checkbox'\n                        id='remember-checkbox'\n                    />\n                </Form.Group>\n            </Form.Row>\n\n            <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control required type=\"number\" placeholder=\"Փոխանցվող գումարը\"/>\n            </Form.Group>\n\n            <Button type=\"button\" onClick={onSubmitHandler} disabled={disableTransfer}>Submit form</Button>\n        </Form>\n    </div>\n})\n","export const MIN_REMAINING = 1000\n","import * as React from 'react';\nimport {css, injectGlobal} from 'emotion'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {LoginComponent} from \"./LoginComponent\";\nimport {Container} from \"react-bootstrap\";\nimport {BrowserRouter as Router, Switch, Route,} from \"react-router-dom\";\nimport {IState} from \"../store/IState\";\nimport {IAction, reducer} from \"../store/reducer\";\nimport {MenuComponent} from \"./MenuComponent\";\nimport '../fonts/fonts.css'\nimport {TransferComponent} from \"./TransferComponent\";\n\ninjectGlobal`\n\n\n    body {\n        font-family: \"arian\";\n    }\n`\n\nconst mainClass = css`\n    @media(min-width: 420px) {\n        width: 70%;\n        margin: 0 auto;l\n    }\n`;\n\nconst containerClass = css`\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n`\n\nconst initialState: IState = {\n    remaining: 500\n}\n\nexport const StateContext = React.createContext<{ state: IState, dispatch: React.Dispatch<IAction> | any}>(\n    {state: initialState, dispatch: null}\n)\n\nconst App: React.FunctionComponent = () => {\n    const [state, dispatch] = React.useReducer(reducer, initialState)\n\n    return (\n        <StateContext.Provider value={{state, dispatch: dispatch!}}>\n            <Container className={containerClass}>\n                <Router>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <LoginComponent/>\n                        </Route>\n                        <Route exact path=\"/menu\">\n                            <MenuComponent/>\n                        </Route>\n                        <Route exact path=\"/transfer\">\n                            <TransferComponent/>\n                        </Route>\n                    </Switch>\n                </Router>\n            </Container>\n        </StateContext.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}